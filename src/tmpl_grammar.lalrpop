use std::str::FromStr;
use ast::{TmplExpr};
use lexer;

grammar<'input>;

pub TmplExpr: Vec<Box<TmplExpr>> = {
    TmplExprTwo+,
};

TmplExprTwo: Box<TmplExpr> = {
    "include" Whitespace+ r#"""# <Lit> r#"""# => Box::new(TmplExpr::Include(<>)),
    "substitute" Whitespace+ r#"""# <Comma<Sub>> r#"""# => Box::new(TmplExpr::Substitute(<>)),
    TmplExprThree,
};

TmplExprThree: Box<TmplExpr> = {
    "${" <TmplExprThree+> "}" => Box::new(TmplExpr::Makro(<>)),
    "${" <TmplExprThree+> "=" "}" => Box::new(TmplExpr::MakroWithDefault(<>, vec![Box::new(TmplExpr::Text(String::from("")))])),
    "${" <TmplExprThree+> "=" <TmplExprThree+> "}" => Box::new(TmplExpr::MakroWithDefault(<>)),
    "$(" <TmplExprThree+> ")" => Box::new(TmplExpr::Makro(<>)),
    "$(" <TmplExprThree+> "=" ")" => Box::new(TmplExpr::MakroWithDefault(<>, vec![Box::new(TmplExpr::Text(String::from("")))])),
    "$(" <TmplExprThree+> "=" <TmplExprThree+> ")" => Box::new(TmplExpr::MakroWithDefault(<>)),
    Lit => Box::new(TmplExpr::Text(<>)),
    Space => Box::new(TmplExpr::Text(<>)),
    Tab => Box::new(TmplExpr::Text(<>)),
    Newline => Box::new(TmplExpr::Text(<>)),
};

Sub: (Vec<Box<TmplExpr>>, Vec<Box<TmplExpr>>) = {
    <TmplExprThree+> "=" <TmplExprThree+>,
};

Lit: String = r#".*"# => <>.to_string();

Space: String = " " => " ".to_string();
Tab: String = "\t" => "\t".to_string();
Newline: String = "\n" => "\n".to_string();

Whitespace = {
    Space,
    Tab,
};

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

extern {
    type Location = usize;
    type Error = lexer::LexicalError;


    enum lexer::Tok<'input> {
        r#".*"# => lexer::Tok::Text(<&'input str>),
        "\n" => lexer::Tok::Newline,
        r#"""# => lexer::Tok::Quote,
        "=" => lexer::Tok::Equals,
        "," => lexer::Tok::Comma,
        " " => lexer::Tok::Space,
        "\t" => lexer::Tok::Tab,
        "include" => lexer::Tok::CommandInclude,
        "substitute" => lexer::Tok::CommandSubstitute,
        "${" => lexer::Tok::MacroBrBegin,
        "}" => lexer::Tok::MacroBrEnd,
        "$(" => lexer::Tok::MacroPaBegin,
        ")" => lexer::Tok::MacroPaEnd,
    }
}
